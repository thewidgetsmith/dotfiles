#!/usr/bin/env zsh

# Output colors
GRN='\033[0;32m'
RED='\033[0;31m'
YLW='\033[1;33m'
CLR='\033[0m'

export OLD_EMAIL="$1"
export NEW_EMAIL="$2"
export NEW_NAME="$3"
export FILTER_BRANCH_SQUELCH_WARNING=1

if [[ $# -eq 3 ]]; then
  echo "${YLW}replacing commit author identity for all commits associated with '$OLD_EMAIL'${CLR}"
  echo "${YLW}'$OLD_EMAIL' -> '$NEW_EMAIL'${CLR}"
  echo "${GRN}> begin ...${CLR}"
  git filter-branch --env-filter '
  if [ "$GIT_COMMITTER_EMAIL" = "'$OLD_EMAIL'" ]; then
    export GIT_COMMITTER_EMAIL="'$NEW_EMAIL'"
    export GIT_COMMITTER_NAME="$NEW_NAME"
  fi
  if [ "$GIT_AUTHOR_EMAIL" = "'$OLD_EMAIL'" ]; then
    export GIT_AUTHOR_EMAIL="'$NEW_EMAIL'"
    export GIT_AUTHOR_NAME="$NEW_NAME"
  fi
  ' --force --tag-name-filter cat -- --branches --tags
  echo "${GRN}> ... finished${CLR}"
  echo ""
  echo "Verify commit history contains desired changes then FORCE push to remote with:"
  echo "    git push origin --force --all"
  echo "    git push origin --force --tags"
  echo ""
  echo ${RED}"NOTE: Collaborators should rebase (not merge) onto new commit history${CLR}"
else
  echo "Usage: $0 OLD_EMAIL NEW_EMAIL NEW_NAME"
  echo ""
  echo "    OLD_EMAIL    The email address to be replaced in the commit history"
  echo "    NEW_EMAIL    The new commit author email address to replace OLD_EMAIL on each commit"
  echo "    NEW_NAME     The new commit author name to be used on all affected commits"
fi

unset OLD_EMAIL
unset NEW_EMAIL
unset NEW_NAME
