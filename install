#!/usr/bin/env zsh
#
# The Widgetsmith Dotfiles installer script
#
# Installs the dotfiles and affiliated utilities.
#
# In order to create a more robust script and a better user experience, this
# script inspired by the structure and strategy described by this blog post:
# - https://betterdev.blog/minimal-safe-bash-script-template/
#

# set some execution parameters
# `-E`          set traps to be inherited within shell functions, etc
# `-e`          exit immediately upon a non-zero command exit code
# `-u`          treat unset variables as an error and exit immediately
# `-o pipefail` use the exit code of the rightmost failed command in a pipeline
set -Eeuo pipefail

# error handler
trap cleanup SIGINT SIGTERM ERR EXIT

# locate the script location to setup work with file paths relative to the
# script location rather than the execution location.

SCRIPT_NAME=$(basename "${(%):-%N}")
DOTFILES_DIR=$(cd "$(dirname "${(%):-%N}")" &>/dev/null && pwd -P)
DOTFILES_INC=$DOTFILES_DIR/inc
DOTFILES_OUT=$DOTFILES_DIR/out

GIT_CONFIG_INCLUDE_STRING=$(cat <<EOF
# include gitconfig from dotfiles
[include]
        path = $DOTFILES_OUT/gitconfig.local

# local settings and overrides below this line
EOF
)

# include shared functions
source $DOTFILES_DIR/lib/common.sh

# functions

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

usage() {
  cat <<EOF
Usage: ./$SCRIPT_NAME [--help] [--debug] [--no-color] [--reinstall]

Options:
-h, --help      Print this help and exit
-x, --debug     Print script debug info
--no-color      Disable colored text output
--reinstall     Remove installation and start over

EOF
  exit
}

parse_params() {
   while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -x | --debug) set -x ;;
    --no-color) NO_COLOR=1 ;;
    --reinstall) REINSTALL=1 ;;
    -?*) die "unknown script option: $1"; ;;
    *) break ;;
    esac
    shift
  done

  return 0
}

init_install () {
  # make sure 'out' directory exists
  if ! test -d "$DOTFILES_OUT"; then
    mkdir -p $DOTFILES_OUT
  fi
}

setup_gitconfig() {
  local GIT_CONFIG_DIR="$DOTFILES_INC/git"
  local GIT_CONFIG_OUT="$DOTFILES_OUT/gitconfig.local"
  if test -f "${GIT_CONFIG_OUT}"; then
    success "gitconfig already exists"
  else
    info "setup gitconfig"
    local git_author_name
    local git_author_email
    local git_credential

    case "$(uname -s)" in
    Darwin) git_credential="osxkeychain" ;;
    Linux) git_credential="cache" ;;
    *) die "unable to determine kernel name" ;;
    esac

    vared -p "%B%F{cyan}What is your github author name?%f " -c git_author_name
    vared -p "%B%F{cyan}What is your github author email?%f " -c git_author_email

    sed -e "s/AUTHOR_NAME/$git_author_name/g" \
        -e "s/AUTHOR_EMAIL/$git_author_email/g" \
        -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" \
        $GIT_CONFIG_DIR/gitconfig.template > $GIT_CONFIG_OUT

    success "setup gitconfig complete"
  fi

  local GIT_CONFIG_LOCAL="$HOME/.gitconfig"
  local GIT_INCLUDE_STR="path = $GIT_CONFIG_OUT"
  if ! test -f "${GIT_CONFIG_LOCAL}"; then
    info " › create .gitconfig file at $GIT_CONFIG_LOCAL"
    touch $GIT_CONFIG_LOCAL
  fi

  if ! grep -q -F "$GIT_INCLUDE_STR" "$GIT_CONFIG_LOCAL"; then
    info " › insert include into $GIT_CONFIG_LOCAL"
    echo $GIT_CONFIG_INCLUDE_STRING | cat - $GIT_CONFIG_LOCAL > \
      $DOTFILES_OUT/gitconfig.temp && \
      mv $DOTFILES_OUT/gitconfig.temp $GIT_CONFIG_LOCAL
  fi
}

setup_dotfiles() {
  info "install local configs"

  local backup_all=false
  local overwrite_all=false
  local skip_all=false

  for src in $(find -H "$DOTFILES_INC" -maxdepth 2 -name '*.symlink'); do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done

  success "install local configs complete"
}

echo ""

parse_params "$@"
setup_colors

info "setup dotfiles"

init_install
setup_gitconfig
setup_dotfiles

# if source bin/dot | while read -r data; do info "$data"; done; then
#   success "dependencies installed"
# else
#   die "error installing dependencies"
# fi

success "setup dotfiles complete"
